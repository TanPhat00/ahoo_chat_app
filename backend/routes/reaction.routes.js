const express = require('express');
const router = express.Router();
const Message = require('../models/Message');
const authMiddleware = require('../middlewares/auth.middleware');

const allowedEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üëç', 'üëé', 'üéâ', 'üî•', 'üò¢', 'üòÆ'];

router.post('/:messageId', authMiddleware, async (req, res) => {
  const { messageId } = req.params;
  const { emojis } = req.body; // M·∫£ng emoji
  const userId = req.user.id;

  if (!Array.isArray(emojis)) {
    return res.status(400).json({ error: 'emojis ph·∫£i l√† m·∫£ng' });
  }

  try {
    const message = await Message.findById(messageId);
    if (!message) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y tin nh·∫Øn' });

    // G·ª° to√†n b·ªô reaction c≈© c·ªßa user
    message.reactions = message.reactions.filter(
      r => r.user.toString() !== userId
    );

    // L·ªçc ra c√°c emoji h·ª£p l·ªá
    const validEmojis = emojis.filter(e => allowedEmojis.includes(e));

    // Th√™m l·∫°i c√°c emoji m·ªõi n·∫øu c√≥
    for (const emoji of validEmojis) {
      message.reactions.push({ user: userId, emoji });
    }

    await message.save();

    res.json({
      message: 'C·∫≠p nh·∫≠t reaction th√†nh c√¥ng',
      reactions: message.reactions
    });
  } catch (err) {
    res.status(500).json({ error: 'L·ªói server', detail: err.message });
  }
});

module.exports = router;