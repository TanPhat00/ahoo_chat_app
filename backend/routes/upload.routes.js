const express = require('express');
const router = express.Router();
const upload = require('../middlewares/upload.middleware');
const cloudinary = require('../config/cloudinary');
const auth = require('../middlewares/auth.middleware');
const User = require('../models/User');
const streamifier = require('streamifier');

// üîß C·∫•u h√¨nh avatar m·∫∑c ƒë·ªãnh
const DEFAULT_AVATAR = 'https://w7.pngwing.com/pngs/177/551/png-transparent-user-interface-design-computer-icons-default-stephen-salazar-graphy-user-interface-design-computer-wallpaper-sphere-thumbnail.png'; // c·∫≠p nh·∫≠t link th·ª±c t·∫ø c·ªßa b·∫°n

// üìå C·∫≠p nh·∫≠t avatar user
router.post('/avatar', auth, upload.single('avatar'), async (req, res) => {
  console.log('[DEBUG] req.file:', req.file); // Th√™m d√≤ng n√†y

  try {
    if (!req.file) return res.status(400).json({ success: false, error: 'Kh√¥ng c√≥ file ·∫£nh' });

    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // N·∫øu avatar hi·ªán t·∫°i ƒë√£ t·ªìn t·∫°i v√† gi·ªëng ·∫£nh m·ªõi (d·ª±a theo checksum/url so s√°nh tu·ª≥ logic)
    // => B·ªè qua b∆∞·ªõc n√†y v√¨ Cloudinary kh√¥ng tr·∫£ hash tr√πng nhau t·ª´ buffer.
    // B·∫°n c√≥ th·ªÉ ki·ªÉm tra k√≠ch th∆∞·ªõc/t√™n n·∫øu mu·ªën, ·ªü ƒë√¢y ta upload m·ªói l·∫ßn ƒë·ªÅu t·∫°o ·∫£nh m·ªõi

    const streamUpload = (req) => {
      return new Promise((resolve, reject) => {
        const stream = cloudinary.uploader.upload_stream(
          { folder: 'avatars' },
          (error, result) => {
            if (result) resolve(result);
            else reject(error);
          }
        );
        streamifier.createReadStream(req.file.buffer).pipe(stream);
      });
    };

    const result = await streamUpload(req);

    // Optional: N·∫øu c√≥ avatar c≈© kh√°c m·∫∑c ƒë·ªãnh th√¨ c√≥ th·ªÉ xo√° kh·ªèi cloudinary
    if (user.avatar && user.avatar !== DEFAULT_AVATAR) {
      const segments = user.avatar.split('/');
      const publicId = segments[segments.length - 1].split('.')[0]; // Extract public ID
      await cloudinary.uploader.destroy(`avatars/${publicId}`);
    }

    user.avatar = result.secure_url;
    await user.save();

    res.json({ success: true, message: 'Avatar ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', avatar: user.avatar });
  } catch (err) {
    res.status(500).json({ success: false, error: 'L·ªói m√°y ch·ªß', detail: err.message });
  }
});

// üìå Xo√° avatar (tr·ªü v·ªÅ m·∫∑c ƒë·ªãnh)
router.delete('/avatar', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    if (!user.avatar || user.avatar === DEFAULT_AVATAR) {
      return res.status(400).json({ success: false, error: 'Avatar ƒë√£ l√† m·∫∑c ƒë·ªãnh' });
    }

    // Xo√° avatar c≈© kh·ªèi Cloudinary
    const segments = user.avatar.split('/');
    const publicId = segments[segments.length - 1].split('.')[0]; // Extract public ID
    await cloudinary.uploader.destroy(`avatars/${publicId}`);

    user.avatar = DEFAULT_AVATAR;
    await user.save();

    res.json({ success: true, message: 'ƒê√£ xo√° avatar, quay v·ªÅ m·∫∑c ƒë·ªãnh', avatar: DEFAULT_AVATAR });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Kh√¥ng th·ªÉ xo√° avatar', detail: err.message });
  }
});

// üìå Upload file chat (·∫£nh, video)
router.post('/message', auth, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'Thi·∫øu file' });

    const result = await new Promise((resolve, reject) => {
      const uploadStream = cloudinary.uploader.upload_stream(
        {
          folder: 'chat',
          resource_type: 'auto' // auto: ·∫£nh, video, file
        },
        (error, result) => {
          if (result) resolve(result);
          else reject(error);
        }
      );
      streamifier.createReadStream(req.file.buffer).pipe(uploadStream);
    });

    res.json({
      message: 'Upload th√†nh c√¥ng',
      url: result.secure_url,
      type: result.resource_type
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói upload', detail: err.message });
  }
});

module.exports = router;
