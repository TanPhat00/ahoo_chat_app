const express = require('express');
const router = express.Router();
const upload = require('../middlewares/upload.middleware');
const cloudinary = require('../config/cloudinary');
const auth = require('../middlewares/auth.middleware');
const User = require('../models/User');
const streamifier = require('streamifier');
const multer = require('multer');

// üîß C·∫•u h√¨nh avatar m·∫∑c ƒë·ªãnh
const DEFAULT_AVATAR = 'https://w7.pngwing.com/pngs/177/551/png-transparent-user-interface-design-computer-icons-default-stephen-salazar-graphy-user-interface-design-computer-wallpaper-sphere-thumbnail.png'; // c·∫≠p nh·∫≠t link th·ª±c t·∫ø c·ªßa b·∫°n

// Middleware x·ª≠ l√Ω l·ªói multer
function multerErrorHandler(err, req, res, next) {
  if (err instanceof multer.MulterError) {
    console.error('[MULTER ERROR]', err);
    return res.status(400).json({
      success: false,
      error: 'L·ªói Multer',
      detail: err.message,
      field: err.field,
      code: err.code,
    });
  } else if (err) {
    console.error('[UNKNOWN UPLOAD ERROR]', err);
    return res.status(500).json({ success: false, error: 'L·ªói m√°y ch·ªß', detail: err.message });
  }
  next();
}
// put anh user
router.post(
  '/avatar',
  auth,
  upload.single('avatar'), // "avatar" l√† t√™n field trong form-data
  multerErrorHandler,
  async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ success: false, error: 'Kh√¥ng c√≥ file ·∫£nh' });
      }

      console.log('[BODY]', req.body); // üëà l·∫•y th√™m th√¥ng tin n·∫øu c√≥

      const user = await User.findById(req.user._id);
      console.log('[DEBUG] req.user:', req.user);
      if (!user) return res.status(404).json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

      // Upload stream l√™n Cloudinary
      const streamUpload = () =>
        new Promise((resolve, reject) => {
          const stream = cloudinary.uploader.upload_stream({ folder: 'avatars' }, (err, result) => {
            if (result) resolve(result);
            else reject(err);
          });
          streamifier.createReadStream(req.file.buffer).pipe(stream);
        });

      const result = await streamUpload();

      // X√≥a avatar c≈© n·∫øu c√≥
      if (user.avatar && user.avatar !== DEFAULT_AVATAR) {
        const segments = user.avatar.split('/');
        const publicId = segments[segments.length - 1].split('.')[0];
        await cloudinary.uploader.destroy(`avatars/${publicId}`);
      }

      user.avatar = result.secure_url;
      await user.save();

      res.json({ success: true, message: 'C·∫≠p nh·∫≠t avatar th√†nh c√¥ng', avatar: user.avatar });
    } catch (err) {
      console.error('[UPLOAD ERROR]', err);
      res.status(500).json({ success: false, error: 'L·ªói m√°y ch·ªß', detail: err.message });
    }
  }
);


// üìå Xo√° avatar (tr·ªü v·ªÅ m·∫∑c ƒë·ªãnh)
router.delete('/avatar', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    if (!user.avatar || user.avatar === DEFAULT_AVATAR) {
      return res.status(400).json({ success: false, error: 'Avatar ƒë√£ l√† m·∫∑c ƒë·ªãnh' });
    }

    // Xo√° avatar c≈© kh·ªèi Cloudinary
    const segments = user.avatar.split('/');
    const publicId = segments[segments.length - 1].split('.')[0]; // Extract public ID
    await cloudinary.uploader.destroy(`avatars/${publicId}`);

    user.avatar = DEFAULT_AVATAR;
    await user.save();

    res.json({ success: true, message: 'ƒê√£ xo√° avatar, quay v·ªÅ m·∫∑c ƒë·ªãnh', avatar: DEFAULT_AVATAR });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Kh√¥ng th·ªÉ xo√° avatar', detail: err.message });
  }
});

// üìå Upload file chat (·∫£nh, video)
router.post('/message', auth, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'Thi·∫øu file' });

    const result = await new Promise((resolve, reject) => {
      const uploadStream = cloudinary.uploader.upload_stream(
        {
          folder: 'chat',
          resource_type: 'auto' // auto: ·∫£nh, video, file
        },
        (error, result) => {
          if (result) resolve(result);
          else reject(error);
        }
      );
      streamifier.createReadStream(req.file.buffer).pipe(uploadStream);
    });

    res.json({
      message: 'Upload th√†nh c√¥ng',
      url: result.secure_url,
      type: result.resource_type
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói upload', detail: err.message });
  }
});

module.exports = router;
